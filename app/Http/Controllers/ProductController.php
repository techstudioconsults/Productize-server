<?php

namespace App\Http\Controllers;

use App\Enums\ProductStatusEnum;
use App\Exceptions\UnprocessableException;
use App\Models\Product;
use App\Http\Requests\StoreProductRequest;
use App\Http\Requests\UpdateProductRequest;
use App\Http\Resources\ProductResource;
use App\Repositories\ProductRepository;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rules\Enum;

class ProductController extends Controller
{
    public function __construct(
        protected ProductRepository $productRepository
    ) {
    }

    public function index(Request $request)
    {
        $user = Auth::user();

        $products = Product::where('user_id', $user->id);

        /**
         * Filter products by Product status
         */
        if ($request->status) {
            $status = $request->status;

            // Validate status
            $validator = Validator::make(['status' => $status], [
                'status' => ['required', new Enum(ProductStatusEnum::class)]
            ]);

            if ($validator->fails()) {
                throw new UnprocessableException($validator->errors()->first());
            }

            $products->where('status', $request->status);
        }

        /**
         * Filter by date of creation
         * start date reps the date to start filtering from
         * end_date reps the date to end the filtering
         */
        if ($request->start_date && $request->end_date) {
            $start_date = $request->start_date;
            $end_date = $request->end_date;

            $validator = Validator::make([
                'start_date' => $start_date,
                'end_date' => $end_date
            ], [
                'start_date' => 'date',
                'end_date' => 'date'
            ]);

            if ($validator->fails()) {
                throw new UnprocessableException($validator->errors()->first());
            }

            $products->whereBetween('created_at', [$start_date, $end_date]);
        }

        return ProductResource::collection($products->paginate(10));
    }


    public function store(StoreProductRequest $request)
    {
        $user = Auth::user();

        $validated = $request->validated();

        $validated['user_id'] = $user->id;

        // Aissign the product data to a variable
        $data = $validated['data'];
        $cover_photos = $validated['cover_photos'];
        $thumbnail = $validated['thumbnail'];

        // Take out the uploadables from the validated array to allow for mass assignment
        unset($validated['data']);
        unset($validated['cover_photos']);
        unset($validated['thumbnail']);

        $product = $this->productRepository->create(
            $validated,
            $thumbnail,
            $data, // The digital products
            $cover_photos
        );

        return new ProductResource($product);
    }


    public function show(Product $product)
    {
        return new ProductResource($product);
    }

    /**
     * Endpoint returns User Dashboard product Analytic numbers
     * @return total_products {int} - Total products uploaded by user. drafts included.
     * @return total_revenues {int} - Total revenues generated by the user on productize. i.e total sales * price
     * @return total_customers {int} - Total number of customers that has patronized autheneticated user.
     */
    public function analytics()
    {
        $user = Auth::user();

        $total_products = $this->productRepository->getTotalProductCountPerUser($user);

        $total_revenues = $this->productRepository->getUserTotalRevenues($user);

        $total_sales = $this->productRepository->getTotalSales($user);

        $total_customers = $this->productRepository->getTotalCustomers($user);

        $result = [
            'total_products' => $total_products,
            'total_sales' => $total_sales,
            'total_customers' => $total_customers,
            'total_revenues' => $total_revenues
        ];

        return new JsonResponse(['data' => $result]);
    }


    public function update(UpdateProductRequest $request, Product $product)
    {
        //
    }


    public function destroy(Product $product)
    {
        //
    }
}
